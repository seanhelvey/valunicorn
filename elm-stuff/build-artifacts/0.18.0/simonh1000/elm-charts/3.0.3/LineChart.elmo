var _simonh1000$elm_charts$LineChart$makeXTick = function (tVal) {
	return _evancz$elm_graphics$Collage$group(
		{
			ctor: '::',
			_0: A2(
				_evancz$elm_graphics$Collage$traced,
				_evancz$elm_graphics$Collage$defaultLine,
				A2(
					_evancz$elm_graphics$Collage$segment,
					{ctor: '_Tuple2', _0: 0, _1: -5},
					{ctor: '_Tuple2', _0: 0, _1: 0})),
			_1: {
				ctor: '::',
				_0: A2(
					_evancz$elm_graphics$Collage$move,
					{ctor: '_Tuple2', _0: 0, _1: -20},
					A2(
						_evancz$elm_graphics$Collage$rotate,
						_elm_lang$core$Basics$degrees(45),
						_evancz$elm_graphics$Collage$text(
							_evancz$elm_graphics$Text$fromString(
								A2(_elm_lang$core$String$left, 4, tVal))))),
				_1: {ctor: '[]'}
			}
		});
};
var _simonh1000$elm_charts$LineChart$makeYTick = function (tVal) {
	var l = _elm_lang$core$String$length(
		_elm_lang$core$Basics$toString(tVal));
	return _evancz$elm_graphics$Collage$group(
		{
			ctor: '::',
			_0: A2(
				_evancz$elm_graphics$Collage$traced,
				_evancz$elm_graphics$Collage$defaultLine,
				A2(
					_evancz$elm_graphics$Collage$segment,
					{ctor: '_Tuple2', _0: -5, _1: 0},
					{ctor: '_Tuple2', _0: 0, _1: 0})),
			_1: {
				ctor: '::',
				_0: A2(
					_evancz$elm_graphics$Collage$move,
					{
						ctor: '_Tuple2',
						_0: (_elm_lang$core$Basics$toFloat(l) * -3.5) - 7,
						_1: 2
					},
					_evancz$elm_graphics$Collage$text(
						_evancz$elm_graphics$Text$fromString(
							_elm_lang$core$Basics$toString(tVal)))),
				_1: {ctor: '[]'}
			}
		});
};
var _simonh1000$elm_charts$LineChart$getTicks = F2(
	function (largest, mostticks) {
		var mini = largest / mostticks;
		var magnitude = _elm_lang$core$Basics$toFloat(
			Math.pow(
				10,
				_elm_lang$core$Basics$floor(
					A2(_elm_lang$core$Basics$logBase, 10, mini) / A2(_elm_lang$core$Basics$logBase, 10, 10))));
		var residual = mini / magnitude;
		return (_elm_lang$core$Native_Utils.cmp(residual, 5) > 0) ? (10 * magnitude) : ((_elm_lang$core$Native_Utils.cmp(residual, 2) > 0) ? (5 * magnitude) : ((_elm_lang$core$Native_Utils.cmp(residual, 1) > 0) ? (2 * magnitude) : magnitude));
	});
var _simonh1000$elm_charts$LineChart$viewLine = function (model) {
	var lineStyle = _elm_lang$core$Native_Utils.update(
		_evancz$elm_graphics$Collage$defaultLine,
		{width: 8, color: _elm_lang$core$Color$lightBlue, join: _evancz$elm_graphics$Collage$Smooth});
	var yVals = A2(
		_elm_lang$core$List$map,
		function (_) {
			return _.value;
		},
		model.items);
	var noValues = function (_p0) {
		return _elm_lang$core$Basics$toFloat(
			_elm_lang$core$List$length(_p0));
	}(model.items);
	var noTicks = 8;
	var tickIncrement = A2(
		_simonh1000$elm_charts$LineChart$getTicks,
		A2(
			_elm_lang$core$Maybe$withDefault,
			0,
			_elm_lang$core$List$maximum(yVals)),
		noTicks);
	var maxY = tickIncrement * noTicks;
	var height = 300;
	var chartH = (height / 2) - 40;
	var width = 400;
	var chartW = (width / 2) - 30;
	var yaxis = {
		ctor: '::',
		_0: A2(
			_evancz$elm_graphics$Collage$traced,
			_evancz$elm_graphics$Collage$defaultLine,
			A2(
				_evancz$elm_graphics$Collage$segment,
				{ctor: '_Tuple2', _0: 0 - chartW, _1: 0 - chartH},
				{ctor: '_Tuple2', _0: 0 - chartW, _1: chartH})),
		_1: A2(
			_elm_lang$core$List$indexedMap,
			function (i) {
				return _evancz$elm_graphics$Collage$move(
					{
						ctor: '_Tuple2',
						_0: 0 - chartW,
						_1: (_elm_lang$core$Basics$toFloat(i) * ((chartH * 2) / noTicks)) - chartH
					});
			},
			A2(
				_elm_lang$core$List$map,
				_simonh1000$elm_charts$LineChart$makeYTick,
				A2(
					_elm_lang$core$List$map,
					function (i) {
						return _elm_lang$core$Basics$toFloat(i) * tickIncrement;
					},
					A2(_elm_lang$core$List$range, 0, noTicks))))
	};
	var xaxis = {
		ctor: '::',
		_0: A2(
			_evancz$elm_graphics$Collage$traced,
			_evancz$elm_graphics$Collage$defaultLine,
			A2(
				_evancz$elm_graphics$Collage$segment,
				{ctor: '_Tuple2', _0: 0 - chartW, _1: 0 - chartH},
				{ctor: '_Tuple2', _0: chartW, _1: 0 - chartH})),
		_1: A2(
			_elm_lang$core$List$indexedMap,
			function (i) {
				return _evancz$elm_graphics$Collage$move(
					{
						ctor: '_Tuple2',
						_0: ((_elm_lang$core$Basics$toFloat(i) + 0.5) * ((chartW * 2) / noValues)) - chartW,
						_1: 0 - chartH
					});
			},
			A2(
				_elm_lang$core$List$map,
				_simonh1000$elm_charts$LineChart$makeXTick,
				A2(
					_elm_lang$core$List$map,
					function (_) {
						return _.label;
					},
					model.items)))
	};
	var val2point = F2(
		function (i, v) {
			var xSpacing = (2 * chartW) / noValues;
			return {
				ctor: '_Tuple2',
				_0: ((_elm_lang$core$Basics$toFloat(i) + 0.5) * xSpacing) - chartW,
				_1: (((v / maxY) * chartH) * 2) - chartH
			};
		});
	return {
		ctor: '::',
		_0: _evancz$elm_graphics$Element$toHtml(
			A3(
				_evancz$elm_graphics$Collage$collage,
				400,
				300,
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: A2(
							_evancz$elm_graphics$Collage$filled,
							_elm_lang$core$Color$white,
							A2(_evancz$elm_graphics$Collage$rect, 400, 300)),
						_1: {
							ctor: '::',
							_0: A2(
								_evancz$elm_graphics$Collage$traced,
								lineStyle,
								_evancz$elm_graphics$Collage$path(
									A2(_elm_lang$core$List$indexedMap, val2point, yVals))),
							_1: {ctor: '[]'}
						}
					},
					A2(_elm_lang$core$Basics_ops['++'], yaxis, xaxis)))),
		_1: {ctor: '[]'}
	};
};
