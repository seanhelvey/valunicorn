var _elm_community$elm_test$Fuzz$toGeneratorFrequency = function (_p0) {
	var _p1 = _p0;
	return {ctor: '_Tuple2', _0: _p1._0, _1: _p1._1._0.generator};
};
var _elm_community$elm_test$Fuzz$okOrCrash = function (result) {
	var _p2 = result;
	if (_p2.ctor === 'Ok') {
		return _p2._0;
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'Fuzz',
			{
				start: {line: 376, column: 5},
				end: {line: 381, column: 28}
			},
			_p2)(_p2._0);
	}
};
var _elm_community$elm_test$Fuzz$charGenerator = A2(
	_mgold$elm_random_pcg$Random_Pcg$map,
	_elm_lang$core$Char$fromCode,
	A2(_mgold$elm_random_pcg$Random_Pcg$int, 32, 126));
var _elm_community$elm_test$Fuzz$custom = F2(
	function (generator, shrinker) {
		return _elm_community$elm_test$Fuzz_Internal$Fuzzer(
			{generator: generator, shrinker: shrinker});
	});
var _elm_community$elm_test$Fuzz$unit = A2(
	_elm_community$elm_test$Fuzz$custom,
	_mgold$elm_random_pcg$Random_Pcg$constant(
		{ctor: '_Tuple0'}),
	_elm_community$shrink$Shrink$noShrink);
var _elm_community$elm_test$Fuzz$bool = A2(_elm_community$elm_test$Fuzz$custom, _mgold$elm_random_pcg$Random_Pcg$bool, _elm_community$shrink$Shrink$bool);
var _elm_community$elm_test$Fuzz$order = function () {
	var intToOrder = function (i) {
		return _elm_lang$core$Native_Utils.eq(i, 0) ? _elm_lang$core$Basics$LT : (_elm_lang$core$Native_Utils.eq(i, 1) ? _elm_lang$core$Basics$EQ : _elm_lang$core$Basics$GT);
	};
	return A2(
		_elm_community$elm_test$Fuzz$custom,
		A2(
			_mgold$elm_random_pcg$Random_Pcg$map,
			intToOrder,
			A2(_mgold$elm_random_pcg$Random_Pcg$int, 0, 2)),
		_elm_community$shrink$Shrink$order);
}();
var _elm_community$elm_test$Fuzz$int = function () {
	var generator = _mgold$elm_random_pcg$Random_Pcg$frequency(
		_elm_lang$core$Native_List.fromArray(
			[
				{
				ctor: '_Tuple2',
				_0: 3,
				_1: A2(_mgold$elm_random_pcg$Random_Pcg$int, -50, 50)
			},
				{
				ctor: '_Tuple2',
				_0: 0.2,
				_1: _mgold$elm_random_pcg$Random_Pcg$constant(0)
			},
				{
				ctor: '_Tuple2',
				_0: 1,
				_1: A2(_mgold$elm_random_pcg$Random_Pcg$int, 0, _mgold$elm_random_pcg$Random_Pcg$maxInt - _mgold$elm_random_pcg$Random_Pcg$minInt)
			},
				{
				ctor: '_Tuple2',
				_0: 1,
				_1: A2(_mgold$elm_random_pcg$Random_Pcg$int, _mgold$elm_random_pcg$Random_Pcg$minInt - _mgold$elm_random_pcg$Random_Pcg$maxInt, 0)
			}
			]));
	return A2(_elm_community$elm_test$Fuzz$custom, generator, _elm_community$shrink$Shrink$int);
}();
var _elm_community$elm_test$Fuzz$intRange = F2(
	function (min, max) {
		return A2(
			_elm_community$elm_test$Fuzz$custom,
			A2(_mgold$elm_random_pcg$Random_Pcg$int, min, max),
			A2(
				_elm_community$shrink$Shrink$keepIf,
				function (i) {
					return (_elm_lang$core$Native_Utils.cmp(i, min) > -1) && (_elm_lang$core$Native_Utils.cmp(i, max) < 1);
				},
				_elm_community$shrink$Shrink$int));
	});
var _elm_community$elm_test$Fuzz$float = function () {
	var generator = _mgold$elm_random_pcg$Random_Pcg$frequency(
		_elm_lang$core$Native_List.fromArray(
			[
				{
				ctor: '_Tuple2',
				_0: 3,
				_1: A2(_mgold$elm_random_pcg$Random_Pcg$float, -50, 50)
			},
				{
				ctor: '_Tuple2',
				_0: 0.5,
				_1: _mgold$elm_random_pcg$Random_Pcg$constant(0)
			},
				{
				ctor: '_Tuple2',
				_0: 1,
				_1: A2(_mgold$elm_random_pcg$Random_Pcg$float, -1, 1)
			},
				{
				ctor: '_Tuple2',
				_0: 1,
				_1: A2(
					_mgold$elm_random_pcg$Random_Pcg$float,
					0,
					_elm_lang$core$Basics$toFloat(_mgold$elm_random_pcg$Random_Pcg$maxInt - _mgold$elm_random_pcg$Random_Pcg$minInt))
			},
				{
				ctor: '_Tuple2',
				_0: 1,
				_1: A2(
					_mgold$elm_random_pcg$Random_Pcg$float,
					_elm_lang$core$Basics$toFloat(_mgold$elm_random_pcg$Random_Pcg$minInt - _mgold$elm_random_pcg$Random_Pcg$maxInt),
					0)
			}
			]));
	return A2(_elm_community$elm_test$Fuzz$custom, generator, _elm_community$shrink$Shrink$float);
}();
var _elm_community$elm_test$Fuzz$floatRange = F2(
	function (min, max) {
		return A2(
			_elm_community$elm_test$Fuzz$custom,
			A2(_mgold$elm_random_pcg$Random_Pcg$float, min, max),
			A2(
				_elm_community$shrink$Shrink$keepIf,
				function (i) {
					return (_elm_lang$core$Native_Utils.cmp(i, min) > -1) && (_elm_lang$core$Native_Utils.cmp(i, max) < 1);
				},
				_elm_community$shrink$Shrink$float));
	});
var _elm_community$elm_test$Fuzz$percentage = function () {
	var generator = _mgold$elm_random_pcg$Random_Pcg$frequency(
		_elm_lang$core$Native_List.fromArray(
			[
				{
				ctor: '_Tuple2',
				_0: 8,
				_1: A2(_mgold$elm_random_pcg$Random_Pcg$float, 0, 1)
			},
				{
				ctor: '_Tuple2',
				_0: 1,
				_1: _mgold$elm_random_pcg$Random_Pcg$constant(0)
			},
				{
				ctor: '_Tuple2',
				_0: 1,
				_1: _mgold$elm_random_pcg$Random_Pcg$constant(1)
			}
			]));
	return A2(_elm_community$elm_test$Fuzz$custom, generator, _elm_community$shrink$Shrink$float);
}();
var _elm_community$elm_test$Fuzz$char = A2(_elm_community$elm_test$Fuzz$custom, _elm_community$elm_test$Fuzz$charGenerator, _elm_community$shrink$Shrink$character);
var _elm_community$elm_test$Fuzz$string = A2(
	_elm_community$elm_test$Fuzz$custom,
	A3(_elm_community$elm_test$Util$rangeLengthString, 0, 10, _elm_community$elm_test$Fuzz$charGenerator),
	_elm_community$shrink$Shrink$string);
var _elm_community$elm_test$Fuzz$maybe = function (_p4) {
	var _p5 = _p4;
	var genBool = A2(
		_mgold$elm_random_pcg$Random_Pcg$map,
		_elm_lang$core$Basics$not,
		_mgold$elm_random_pcg$Random_Pcg$oneIn(4));
	return A2(
		_elm_community$elm_test$Fuzz$custom,
		A2(_mgold$elm_random_pcg$Random_Pcg$maybe, genBool, _p5._0.generator),
		_elm_community$shrink$Shrink$maybe(_p5._0.shrinker));
};
var _elm_community$elm_test$Fuzz$result = F2(
	function (_p7, _p6) {
		var _p8 = _p7;
		var _p11 = _p8._0;
		var _p9 = _p6;
		var _p10 = _p9._0;
		return A2(
			_elm_community$elm_test$Fuzz$custom,
			A2(
				_mgold$elm_random_pcg$Random_Pcg$andThen,
				_mgold$elm_random_pcg$Random_Pcg$bool,
				function (b) {
					return b ? A2(_mgold$elm_random_pcg$Random_Pcg$map, _elm_lang$core$Result$Err, _p11.generator) : A2(_mgold$elm_random_pcg$Random_Pcg$map, _elm_lang$core$Result$Ok, _p10.generator);
				}),
			A2(_elm_community$shrink$Shrink$result, _p11.shrinker, _p10.shrinker));
	});
var _elm_community$elm_test$Fuzz$list = function (_p12) {
	var _p13 = _p12;
	var _p14 = _p13._0.generator;
	return A2(
		_elm_community$elm_test$Fuzz$custom,
		_mgold$elm_random_pcg$Random_Pcg$frequency(
			_elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 1,
					_1: _mgold$elm_random_pcg$Random_Pcg$constant(
						_elm_lang$core$Native_List.fromArray(
							[]))
				},
					{
					ctor: '_Tuple2',
					_0: 1,
					_1: A2(
						_mgold$elm_random_pcg$Random_Pcg$map,
						function (x) {
							return _elm_lang$core$Native_List.fromArray(
								[x]);
						},
						_p14)
				},
					{
					ctor: '_Tuple2',
					_0: 3,
					_1: A3(_elm_community$elm_test$Util$rangeLengthList, 2, 10, _p14)
				},
					{
					ctor: '_Tuple2',
					_0: 2,
					_1: A3(_elm_community$elm_test$Util$rangeLengthList, 10, 100, _p14)
				},
					{
					ctor: '_Tuple2',
					_0: 0.5,
					_1: A3(_elm_community$elm_test$Util$rangeLengthList, 100, 400, _p14)
				}
				])),
		_elm_community$shrink$Shrink$list(_p13._0.shrinker));
};
var _elm_community$elm_test$Fuzz$array = function (_p15) {
	var _p16 = _p15;
	var _p17 = _p16._0.generator;
	return A2(
		_elm_community$elm_test$Fuzz$custom,
		_mgold$elm_random_pcg$Random_Pcg$frequency(
			_elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 1,
					_1: _mgold$elm_random_pcg$Random_Pcg$constant(_elm_lang$core$Array$empty)
				},
					{
					ctor: '_Tuple2',
					_0: 1,
					_1: A2(
						_mgold$elm_random_pcg$Random_Pcg$map,
						_elm_lang$core$Array$repeat(1),
						_p17)
				},
					{
					ctor: '_Tuple2',
					_0: 3,
					_1: A3(_elm_community$elm_test$Util$rangeLengthArray, 2, 10, _p17)
				},
					{
					ctor: '_Tuple2',
					_0: 2,
					_1: A3(_elm_community$elm_test$Util$rangeLengthArray, 10, 100, _p17)
				},
					{
					ctor: '_Tuple2',
					_0: 0.5,
					_1: A3(_elm_community$elm_test$Util$rangeLengthArray, 100, 400, _p17)
				}
				])),
		_elm_community$shrink$Shrink$array(_p16._0.shrinker));
};
var _elm_community$elm_test$Fuzz$tuple = function (_p18) {
	var _p19 = _p18;
	var _p21 = _p19._1._0;
	var _p20 = _p19._0._0;
	return A2(
		_elm_community$elm_test$Fuzz$custom,
		A3(
			_mgold$elm_random_pcg$Random_Pcg$map2,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			_p20.generator,
			_p21.generator),
		_elm_community$shrink$Shrink$tuple(
			{ctor: '_Tuple2', _0: _p20.shrinker, _1: _p21.shrinker}));
};
var _elm_community$elm_test$Fuzz$tuple3 = function (_p22) {
	var _p23 = _p22;
	var _p26 = _p23._2._0;
	var _p25 = _p23._1._0;
	var _p24 = _p23._0._0;
	return A2(
		_elm_community$elm_test$Fuzz$custom,
		A4(
			_mgold$elm_random_pcg$Random_Pcg$map3,
			F3(
				function (v0, v1, v2) {
					return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
				}),
			_p24.generator,
			_p25.generator,
			_p26.generator),
		_elm_community$shrink$Shrink$tuple3(
			{ctor: '_Tuple3', _0: _p24.shrinker, _1: _p25.shrinker, _2: _p26.shrinker}));
};
var _elm_community$elm_test$Fuzz$tuple4 = function (_p27) {
	var _p28 = _p27;
	var _p32 = _p28._3._0;
	var _p31 = _p28._2._0;
	var _p30 = _p28._1._0;
	var _p29 = _p28._0._0;
	return A2(
		_elm_community$elm_test$Fuzz$custom,
		A5(
			_mgold$elm_random_pcg$Random_Pcg$map4,
			F4(
				function (v0, v1, v2, v3) {
					return {ctor: '_Tuple4', _0: v0, _1: v1, _2: v2, _3: v3};
				}),
			_p29.generator,
			_p30.generator,
			_p31.generator,
			_p32.generator),
		_elm_community$shrink$Shrink$tuple4(
			{ctor: '_Tuple4', _0: _p29.shrinker, _1: _p30.shrinker, _2: _p31.shrinker, _3: _p32.shrinker}));
};
var _elm_community$elm_test$Fuzz$tuple5 = function (_p33) {
	var _p34 = _p33;
	var _p39 = _p34._4._0;
	var _p38 = _p34._3._0;
	var _p37 = _p34._2._0;
	var _p36 = _p34._1._0;
	var _p35 = _p34._0._0;
	return A2(
		_elm_community$elm_test$Fuzz$custom,
		A6(
			_mgold$elm_random_pcg$Random_Pcg$map5,
			F5(
				function (v0, v1, v2, v3, v4) {
					return {ctor: '_Tuple5', _0: v0, _1: v1, _2: v2, _3: v3, _4: v4};
				}),
			_p35.generator,
			_p36.generator,
			_p37.generator,
			_p38.generator,
			_p39.generator),
		_elm_community$shrink$Shrink$tuple5(
			{ctor: '_Tuple5', _0: _p35.shrinker, _1: _p36.shrinker, _2: _p37.shrinker, _3: _p38.shrinker, _4: _p39.shrinker}));
};
var _elm_community$elm_test$Fuzz$map = F2(
	function (f, _p40) {
		var _p41 = _p40;
		return A2(
			_elm_community$elm_test$Fuzz$custom,
			A2(_mgold$elm_random_pcg$Random_Pcg$map, f, _p41._0.generator),
			_elm_community$shrink$Shrink$noShrink);
	});
var _elm_community$elm_test$Fuzz$frequency = function (list) {
	var _p42 = _elm_lang$core$List$head(list);
	if (_p42.ctor === 'Nothing') {
		return _elm_lang$core$Result$Err('You must provide at least one frequency pair.');
	} else {
		if (A2(
			_elm_lang$core$List$any,
			function (_p43) {
				var _p44 = _p43;
				return _elm_lang$core$Native_Utils.cmp(_p44._0, 0) < 0;
			},
			list)) {
			return _elm_lang$core$Result$Err('No frequency weights can be less than 0.');
		} else {
			if (_elm_lang$core$Native_Utils.cmp(
				_elm_lang$core$List$sum(
					A2(_elm_lang$core$List$map, _elm_lang$core$Basics$fst, list)),
				0) < 1) {
				return _elm_lang$core$Result$Err('Frequency weights must sum to more than 0.');
			} else {
				var generator = _mgold$elm_random_pcg$Random_Pcg$frequency(
					A2(_elm_lang$core$List$map, _elm_community$elm_test$Fuzz$toGeneratorFrequency, list));
				return _elm_lang$core$Result$Ok(
					A2(_elm_community$elm_test$Fuzz$custom, generator, _p42._0._1._0.shrinker));
			}
		}
	}
};
var _elm_community$elm_test$Fuzz$frequencyOrCrash = function (_p45) {
	return _elm_community$elm_test$Fuzz$okOrCrash(
		_elm_community$elm_test$Fuzz$frequency(_p45));
};
