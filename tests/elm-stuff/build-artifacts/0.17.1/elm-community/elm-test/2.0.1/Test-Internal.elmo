var _elm_community$elm_test$Test_Internal$isFail = F2(
	function (x, y) {
		return !_elm_lang$core$Native_Utils.eq(x, y);
	})(_elm_community$elm_test$Test_Expectation$Pass);
var _elm_community$elm_test$Test_Internal$formatExpectation = function (_p0) {
	var _p1 = _p0;
	return A2(_elm_community$elm_test$Test_Expectation$withGiven, _p1._0, _p1._1);
};
var _elm_community$elm_test$Test_Internal$shrinkAndAdd = F4(
	function (shrinker, getExpectation, val, dict) {
		var result = A3(
			_elm_community$shrink$Shrink$shrink,
			function (_p2) {
				return _elm_community$elm_test$Test_Internal$isFail(
					getExpectation(_p2));
			},
			shrinker,
			val);
		return A3(
			_elm_lang$core$Dict$insert,
			_elm_lang$core$Basics$toString(result),
			getExpectation(result),
			dict);
	});
var _elm_community$elm_test$Test_Internal$Batch = function (a) {
	return {ctor: 'Batch', _0: a};
};
var _elm_community$elm_test$Test_Internal$Labeled = F2(
	function (a, b) {
		return {ctor: 'Labeled', _0: a, _1: b};
	});
var _elm_community$elm_test$Test_Internal$filterHelp = F3(
	function (lastCheckPassed, isKeepable, test) {
		var _p3 = test;
		switch (_p3.ctor) {
			case 'Test':
				return lastCheckPassed ? test : _elm_community$elm_test$Test_Internal$Batch(
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'Labeled':
				var _p4 = _p3._0;
				return A2(
					_elm_community$elm_test$Test_Internal$Labeled,
					_p4,
					A3(
						_elm_community$elm_test$Test_Internal$filterHelp,
						isKeepable(_p4),
						isKeepable,
						_p3._1));
			default:
				return _elm_community$elm_test$Test_Internal$Batch(
					A2(
						_elm_lang$core$List$map,
						A2(_elm_community$elm_test$Test_Internal$filterHelp, lastCheckPassed, isKeepable),
						_p3._0));
		}
	});
var _elm_community$elm_test$Test_Internal$filter = _elm_community$elm_test$Test_Internal$filterHelp(false);
var _elm_community$elm_test$Test_Internal$Test = function (a) {
	return {ctor: 'Test', _0: a};
};
var _elm_community$elm_test$Test_Internal$fuzzTest = F3(
	function (_p5, desc, getExpectation) {
		var _p6 = _p5;
		var getFailures = F3(
			function (failures, currentSeed, remainingRuns) {
				getFailures:
				while (true) {
					var _p7 = A2(_mgold$elm_random_pcg$Random_Pcg$step, _p6._0.generator, currentSeed);
					var val = _p7._0;
					var nextSeed = _p7._1;
					var newFailures = _elm_lang$core$Native_Utils.eq(
						getExpectation(val),
						_elm_community$elm_test$Test_Expectation$Pass) ? failures : A4(_elm_community$elm_test$Test_Internal$shrinkAndAdd, _p6._0.shrinker, getExpectation, val, failures);
					if (_elm_lang$core$Native_Utils.eq(remainingRuns, 1)) {
						return newFailures;
					} else {
						var _v3 = newFailures,
							_v4 = nextSeed,
							_v5 = remainingRuns - 1;
						failures = _v3;
						currentSeed = _v4;
						remainingRuns = _v5;
						continue getFailures;
					}
				}
			});
		var run = F2(
			function (seed, runs) {
				var failures = A3(getFailures, _elm_lang$core$Dict$empty, seed, runs);
				return _elm_lang$core$Dict$isEmpty(failures) ? _elm_lang$core$Native_List.fromArray(
					[_elm_community$elm_test$Test_Expectation$Pass]) : A2(
					_elm_lang$core$List$map,
					_elm_community$elm_test$Test_Internal$formatExpectation,
					_elm_lang$core$Dict$toList(failures));
			});
		return A2(
			_elm_community$elm_test$Test_Internal$Labeled,
			desc,
			_elm_community$elm_test$Test_Internal$Test(run));
	});
